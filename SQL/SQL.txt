1. Посчитайте, сколько компаний закрылось. 

SELECT COUNT(*)
FROM company
WHERE status = 'closed';

2. Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total.

SELECT funding_total
FROM company 
WHERE category_code = 'news' AND country_code = 'USA'
ORDER BY funding_total DESC; 

3. Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.

SELECT SUM(price_amount)
FROM acquisition
WHERE term_code = 'cash' AND EXTRACT(YEAR FROM CAST(acquired_at AS timestamp)) IN (2011, 2012, 2013); 

4. Отобразите имя, фамилию и названия аккаунтов людей в поле network_username, у которых названия аккаунтов начинаются на 'Silver'.

SELECT first_name, last_name, twitter_username
FROM people
WHERE twitter_username LIKE 'Silver%'; 

5. Выведите на экран всю информацию о людях, у которых названия аккаунтов в поле network_username содержат подстроку 'money', а фамилия начинается на 'K'.

SELECT *
FROM people
WHERE twitter_username LIKE '%money%' AND last_name LIKE 'K%'; 

6. Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.

SELECT country_code, SUM(funding_total)
FROM company
GROUP BY country_code
ORDER BY SUM(funding_total) DESC;

7. Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.

SELECT funded_at, MIN(raised_amount), MAX(raised_amount)
FROM funding_round
GROUP BY funded_at 
HAVING MIN(raised_amount) != 0 AND MIN(raised_amount) != MAX(raised_amount);

8. Создайте поле с категориями:
Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.

SELECT *, CASE 
              WHEN invested_companies >= 100 THEN 'high_activity'
              WHEN invested_companies >= 20 AND invested_companies < 100 THEN 'middle_activity'
              WHEN invested_companies < 20 THEN 'low_activity'
          END
FROM fund;

9. Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.

SELECT CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity, ROUND(AVG(investment_rounds))
FROM fund
GROUP BY activity
ORDER BY ROUND(AVG(investment_rounds));

10. Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы. 
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. 
Выгрузите десять самых активных стран-инвесторов: отсортируйте таблицу по среднему количеству компаний от большего к меньшему. Затем добавьте сортировку по коду страны в лексикографическом порядке.

SELECT country_code, MIN(invested_companies), MAX(invested_companies), AVG(invested_companies)
FROM fund
WHERE EXTRACT(YEAR FROM founded_at) IN (2010, 2011, 2012) 
GROUP BY country_code
HAVING MIN(invested_companies) != 0
ORDER BY AVG(invested_companies) DESC, country_code
LIMIT 10;
 
11. Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.

SELECT p.first_name, p.last_name, e.instituition
FROM people AS p
LEFT JOIN education AS e ON e.person_id = p.id;
  
12. Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.

SELECT c.name, COUNT(DISTINCT e.instituition)
FROM company AS c
LEFT JOIN people AS p ON p.company_id = c.id
JOIN education AS e ON e.person_id = p.id
GROUP BY c.name
ORDER BY COUNT(DISTINCT instituition) DESC
LIMIT 5;
 
13. Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.

SELECT DISTINCT name
FROM company AS c
JOIN funding_round AS fr ON c.id = fr.company_id
WHERE status = 'closed' AND is_first_round = 1 AND is_last_round = 1;
   
14. Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.

SELECT p.id
FROM people AS p
WHERE company_id IN 
(SELECT c.id
FROM company AS c
JOIN funding_round AS fr ON c.id = fr.company_id
WHERE status = 'closed' AND is_first_round = 1 AND is_last_round = 1);
      
15. Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.

SELECT DISTINCT t_1.id, e.instituition 
FROM (SELECT p.id
      FROM people AS p
      WHERE company_id IN (SELECT c.id
                     FROM company AS c
                     JOIN funding_round AS fr ON c.id = fr.company_id
                     WHERE status = 'closed' AND is_first_round = 1 AND is_last_round = 1)) AS t_1 
JOIN education AS e ON e.person_id = t_1.id;
      
16. Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.

SELECT t_1.id, COUNT(e.instituition)
FROM (SELECT p.id
      FROM people AS p
      WHERE company_id IN (SELECT c.id
                     FROM company AS c
                     JOIN funding_round AS fr ON c.id = fr.company_id
                     WHERE status = 'closed' AND is_first_round = 1 AND is_last_round = 1)) AS t_1 
JOIN education AS e ON e.person_id = t_1.id
GROUP BY t_1.id;
 
17. Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.

SELECT AVG(t_2.count)
FROM (SELECT t_1.id, COUNT(e.instituition)
FROM (SELECT p.id
      FROM people AS p
      WHERE company_id IN (SELECT c.id
                     FROM company AS c
                     JOIN funding_round AS fr ON c.id = fr.company_id
                     WHERE status = 'closed' AND is_first_round = 1 AND is_last_round = 1)) AS t_1 
JOIN education AS e ON e.person_id = t_1.id
GROUP BY t_1.id) AS t_2;
     
18. Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Facebook*.
*(сервис, запрещённый на территории РФ)

SELECT AVG(t_2.count)
FROM (SELECT t_1.id, COUNT(e.instituition)
FROM (SELECT p.id
      FROM people AS p
      WHERE company_id IN (SELECT c.id
                     FROM company AS c
                     JOIN funding_round AS fr ON c.id = fr.company_id
                     WHERE  name LIKE '%Facebook%')) AS t_1 
JOIN education AS e ON e.person_id = t_1.id
GROUP BY t_1.id) AS t_2;
     
19. Составьте таблицу из полей:
name_of_fund — название фонда;
name_of_company — название компании;
amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.

SELECT DISTINCT t_1.fund_name AS name_of_fund, t_1.com_name AS name_of_company, t_1.raised_amount AS amount
FROM (SELECT *, c.milestones AS milestones_, c.name AS com_name, f.name AS fund_name 
      FROM company AS c
      JOIN investment AS i ON c.id = i.company_id
      JOIN funding_round AS fr ON fr.id = i.funding_round_id
      JOIN fund AS f ON i.fund_id = f.id) AS t_1
WHERE t_1.milestones_ > 6 AND EXTRACT(YEAR FROM t_1.funded_at) IN (2012, 2013);
   
20. Выгрузите таблицу, в которой будут такие поля:
название компании-покупателя;
сумма сделки;
название компании, которую купили;
сумма инвестиций, вложенных в купленную компанию;
доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы. 
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.

SELECT c_acquiring.name AS acquiring_name, a.price_amount, c_acquired.name AS acquired_name, c_acquired.funding_total, ROUND(a.price_amount/c_acquired.funding_total)
FROM acquisition AS a
JOIN company AS c_acquiring ON a.acquiring_company_id = c_acquiring.id
JOIN company AS c_acquired ON a.acquired_company_id = c_acquired.id
WHERE a.price_amount != 0 AND c_acquired.funding_total != 0
ORDER BY a.price_amount DESC, acquired_name
LIMIT 10;
 
21. Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.

SELECT EXTRACT(MONTH FROM funded_at), t_1.name
      FROM (SELECT *
            FROM company AS c
            WHERE category_code = 'social') AS t_1
JOIN funding_round AS fr ON fr.company_id = t_1.id
WHERE (EXTRACT(YEAR FROM fr.funded_at) BETWEEN 2010 AND 2013) AND fr.raised_amount != 0;
   
22. Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
номер месяца, в котором проходили раунды;
количество уникальных названий фондов из США, которые инвестировали в этом месяце;
количество компаний, купленных за этот месяц;
общая сумма сделок по покупкам в этом месяце.

WITH 

us_funds AS (SELECT Extract(month FROM fr.funded_at) AS month, 
             Count(DISTINCT f.id) AS fund_cnt 
             FROM investment i 
             LEFT JOIN funding_round fr ON i.funding_round_id = fr.id 
             LEFT JOIN fund f ON f.id = i.fund_id 
             WHERE Extract(year FROM fr.funded_at) BETWEEN 2010 AND 2013 AND f.country_code = 'USA' 
             GROUP BY month), 
cte_acq_group AS (SELECT Extract(month FROM acquired_at) AS month, Count(acquired_company_id) AS acquired_cnt, Sum(price_amount) AS sum_acquisition
                  FROM acquisition 
                  WHERE Extract(year FROM acquired_at) BETWEEN 2010 AND 2013 
                  GROUP BY month) 
                  
SELECT uf.month, fund_cnt, acquired_cnt, sum_acquisition 
FROM cte_acq_group cag 
JOIN us_funds uf ON uf.month = cag.month;
          
23. Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.

WITH

t_2011 AS (SELECT country_code, AVG(funding_total) AS year_2011
      FROM company
      WHERE EXTRACT(YEAR FROM founded_at) = 2011
      GROUP BY country_code),
t_2012 AS (SELECT country_code, AVG(funding_total) AS year_2012
      FROM company
      WHERE EXTRACT(YEAR FROM founded_at) = 2012
      GROUP BY country_code),
t_2013 AS (SELECT country_code, AVG(funding_total) AS year_2013
      FROM company
      WHERE EXTRACT(YEAR FROM founded_at) = 2013
      GROUP BY country_code)
      

SELECT t_2011.country_code, t_2011.year_2011, t_2012.year_2012, t_2013.year_2013
FROM t_2011
JOIN t_2012 ON t_2011.country_code = t_2012.country_code
JOIN t_2013 ON t_2012.country_code = t_2013.country_code
ORDER BY year_2011 DESC;